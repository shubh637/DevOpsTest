I'll create a downloadable PDF guide based on your Flask notes. Here's the complete PDF content:

Flask Web Development Guide
Complete Reference from Basic Setup to Advanced APIs
Table of Contents
Introduction to Flask

Environment Setup

Basic Flask Application Structure

Blueprint Architecture

Database Setup with SQLAlchemy

User Authentication System

CRUD Operations Implementation

Flash Messages

Pagination System

RESTful API Development

Advanced API Features

1. Introduction to Flask
Flask is a lightweight WSGI web application framework. It is designed to make getting started quick and easy, with the ability to scale up to complex applications. It provides simplicity and flexibility for web development.

Key Features:

Lightweight and modular

Easy to get started with

Extensible through numerous extensions

Jinja2 templating engine

Built-in development server and debugger

2. Environment Setup
Virtual Environment Setup
bash
# Create virtual environment
python3 -m venv venv

# Activate (macOS/Linux)
source venv/bin/activate

# Activate (Windows)
venv\Scripts\activate
Install Dependencies
bash
# Install Flask
pip install Flask

# Install common extensions
pip install Flask-SQLAlchemy Flask-Login Flask-RESTful

# Install from requirements file
pip install -r requirements.txt
3. Basic Flask Application Structure
Minimal Application
python
# app/__init__.py
from flask import Flask

def create_app():
    app = Flask(__name__)
    return app
Running the Application
bash
export FLASK_APP=app
export FLASK_ENV=development
flask run
4. Blueprint Architecture
Blueprints help organize your application into reusable components.

Main Blueprint
python
# app/main/__init__.py
from flask import Blueprint

main = Blueprint('main', __name__)

from app.main import routes
python
# app/main/routes.py
from app.main import main

@main.route('/')
def index():
    return "Hello World"

@main.route('/profile')
def profile():
    return "Profile Page"
Auth Blueprint
python
# app/auth/__init__.py
from flask import Blueprint

auth = Blueprint('auth', __name__)

from app.auth import routes
python
# app/auth/routes.py
from app.auth import auth

@auth.route('/login')
def login():
    return "Login Page"

@auth.route('/signup')
def signup():
    return "Signup Page"

@auth.route('/logout')
def logout():
    return "Logout Page"
Registering Blueprints
python
# app/__init__.py
from flask import Flask
from app.main import main as main_blueprint
from app.auth import auth as auth_blueprint

def create_app():
    app = Flask(__name__)
    
    # Register blueprints
    app.register_blueprint(main_blueprint)
    app.register_blueprint(auth_blueprint, url_prefix='/auth')
    
    return app
5. Database Setup with SQLAlchemy
Configuration
python
# config.py
import os

basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'dev-secret-key'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or \
        'sqlite:///' + os.path.join(basedir, 'app.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False
Database Initialization
python
# app/__init__.py
from flask import Flask
from flask_sqlalchemy import SQLAlchemy
from config import Config

db = SQLAlchemy()

def create_app():
    app = Flask(__name__)
    app.config.from_object(Config)
    
    db.init_app(app)
    
    # Import models
    from app import models
    
    # Create tables
    with app.app_context():
        db.create_all()
    
    return app
User Model
python
# app/models.py
from app import db
from flask_login import UserMixin
from datetime import datetime

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(64), unique=True, nullable=False)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password_hash = db.Column(db.String(128))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    
    # Relationship with posts
    posts = db.relationship('Post', backref='author', lazy='dynamic')
    
    def __repr__(self):
        return f'<User {self.username}>'
Post Model
python
# app/models.py
class Post(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    title = db.Column(db.String(100), nullable=False)
    content = db.Column(db.Text, nullable=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), nullable=False)
    
    def __repr__(self):
        return f'<Post {self.title}>'
6. User Authentication System
Login Manager Setup
python
# app/__init__.py
from flask_login import LoginManager

login_manager = LoginManager()
login_manager.login_view = 'auth.login'
login_manager.login_message_category = 'info'

def create_app():
    app = Flask(__name__)
    # ... other configurations
    
    login_manager.init_app(app)
    
    from app.models import User
    
    @login_manager.user_loader
    def load_user(user_id):
        return User.query.get(int(user_id))
    
    return app
User Registration
python
# app/auth/routes.py
from flask import render_template, redirect, url_for, flash, request
from flask_login import login_user
from werkzeug.security import generate_password_hash, check_password_hash
from app import db
from app.models import User
from app.auth.forms import RegistrationForm

@auth.route('/register', methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        hashed_password = generate_password_hash(form.password.data)
        user = User(
            username=form.username.data,
            email=form.email.data,
            password_hash=hashed_password
        )
        db.session.add(user)
        db.session.commit()
        flash('Your account has been created! You can now log in.', 'success')
        return redirect(url_for('auth.login'))
    return render_template('auth/register.html', form=form)
User Login
python
# app/auth/routes.py
from app.auth.forms import LoginForm

@auth.route('/login', methods=['GET', 'POST'])
def login():
    form = LoginForm()
    if form.validate_on_submit():
        user = User.query.filter_by(email=form.email.data).first()
        if user and check_password_hash(user.password_hash, form.password.data):
            login_user(user, remember=form.remember.data)
            next_page = request.args.get('next')
            return redirect(next_page) if next_page else redirect(url_for('main.home'))
        else:
            flash('Login unsuccessful. Please check email and password.', 'danger')
    return render_template('auth/login.html', form=form)
User Logout
python
# app/auth/routes.py
from flask_login import logout_user, login_required

@auth.route('/logout')
@login_required
def logout():
    logout_user()
    return redirect(url_for('main.home'))
Protecting Routes
python
from flask_login import login_required

@main.route('/profile')
@login_required
def profile():
    return render_template('profile.html')
7. CRUD Operations Implementation
Create Operation
python
# app/main/routes.py
from flask import render_template, redirect, url_for, flash
from flask_login import current_user, login_required
from app import db
from app.models import Post
from app.main.forms import PostForm

@main.route('/post/new', methods=['GET', 'POST'])
@login_required
def new_post():
    form = PostForm()
    if form.validate_on_submit():
        post = Post(
            title=form.title.data,
            content=form.content.data,
            author=current_user
        )
        db.session.add(post)
        db.session.commit()
        flash('Your post has been created!', 'success')
        return redirect(url_for('main.home'))
    return render_template('create_post.html', form=form)
Read Operation
python
@main.route('/post/<int:post_id>')
def post(post_id):
    post = Post.query.get_or_404(post_id)
    return render_template('post.html', post=post)
Update Operation
python
@main.route('/post/<int:post_id>/update', methods=['GET', 'POST'])
@login_required
def update_post(post_id):
    post = Post.query.get_or_404(post_id)
    if post.author != current_user:
        abort(403)
    form = PostForm()
    if form.validate_on_submit():
        post.title = form.title.data
        post.content = form.content.data
        db.session.commit()
        flash('Your post has been updated!', 'success')
        return redirect(url_for('main.post', post_id=post.id))
    elif request.method == 'GET':
        form.title.data = post.title
        form.content.data = post.content
    return render_template('create_post.html', form=form)
Delete Operation
python
@main.route('/post/<int:post_id>/delete', methods=['POST'])
@login_required
def delete_post(post_id):
    post = Post.query.get_or_404(post_id)
    if post.author != current_user:
        abort(403)
    db.session.delete(post)
    db.session.commit()
    flash('Your post has been deleted!', 'success')
    return redirect(url_for('main.home'))
8. Flash Messages
Displaying Flash Messages
html
<!-- templates/base.html -->
{% with messages = get_flashed_messages(with_categories=true) %}
  {% if messages %}
    {% for category, message in messages %}
      <div class="alert alert-{{ category }}">
        {{ message }}
      </div>
    {% endfor %}
  {% endif %}
{% endwith %}
Creating Flash Messages
python
from flask import flash

flash('Your message here', 'category')
# Common categories: success, info, warning, danger
9. Pagination System
Implementing Pagination in Routes
python
# app/main/routes.py
@main.route('/posts')
def posts():
    page = request.args.get('page', 1, type=int)
    posts = Post.query.order_by(Post.created_at.desc()).paginate(
        page=page, per_page=5)
    return render_template('posts.html', posts=posts)
Pagination in Templates
html
<!-- templates/posts.html -->
{% for post in posts.items %}
  <article>
    <h2>{{ post.title }}</h2>
    <p>{{ post.content }}</p>
  </article>
{% endfor %}

<!-- Pagination Links -->
{% if posts.pages > 1 %}
  <nav>
    {% for page_num in posts.iter_pages(left_edge=1, right_edge=1, left_current=2, right_current=2) %}
      {% if page_num %}
        {% if posts.page == page_num %}
          <a href="{{ url_for('main.posts', page=page_num) }}" class="active">{{ page_num }}</a>
        {% else %}
          <a href="{{ url_for('main.posts', page=page_num) }}">{{ page_num }}</a>
        {% endif %}
      {% else %}
        <span>...</span>
      {% endif %}
    {% endfor %}
  </nav>
{% endif %}
10. RESTful API Development
Installing Flask-RESTful
bash
pip install flask-restful
Basic API Setup
python
# app/api/__init__.py
from flask_restful import Api

api = Api()

def init_app(app):
    api.init_app(app)
python
# app/__init__.py
from app.api import api

def create_app():
    app = Flask(__name__)
    # ... other configurations
    
    from app.api import api
    api.init_app(app)
    
    return app
Simple API Resources
python
# app/api/resources.py
from flask_restful import Resource

class HelloWorld(Resource):
    def get(self):
        return {'message': 'Hello, World!'}

class HelloName(Resource):
    def get(self, name):
        return {'message': f'Hello, {name}!'}
Registering API Resources
python
# app/api/__init__.py
from app.api.resources import HelloWorld, HelloName

def init_app(app):
    api.init_app(app)
    api.add_resource(HelloWorld, '/api/hello')
    api.add_resource(HelloName, '/api/hello/<string:name>')
11. Advanced API Features
Request Parsing
python
# app/api/resources.py
from flask_restful import reqparse, abort

post_parser = reqparse.RequestParser()
post_parser.add_argument('title', type=str, required=True, help='Title is required')
post_parser.add_argument('content', type=str, required=True, help='Content is required')

put_parser = reqparse.RequestParser()
put_parser.add_argument('title', type=str)
put_parser.add_argument('content', type=str)
API Resource with CRUD Operations
python
# app/api/resources.py
from flask_restful import fields, marshal_with

# Response formatting
post_fields = {
    'id': fields.Integer,
    'title': fields.String,
    'content': fields.String,
    'created_at': fields.DateTime,
    'user_id': fields.Integer
}

class PostResource(Resource):
    @marshal_with(post_fields)
    def get(self, post_id):
        post = Post.query.get_or_404(post_id)
        return post
    
    @marshal_with(post_fields)
    def put(self, post_id):
        post = Post.query.get_or_404(post_id)
        args = put_parser.parse_args()
        
        if args['title']:
            post.title = args['title']
        if args['content']:
            post.content = args['content']
            
        db.session.commit()
        return post
    
    def delete(self, post_id):
        post = Post.query.get_or_404(post_id)
        db.session.delete(post)
        db.session.commit()
        return {'message': 'Post deleted successfully'}
Registering Advanced API Resources
python
# app/api/__init__.py
from app.api.resources import PostResource

def init_app(app):
    api.init_app(app)
    api.add_resource(PostResource, '/api/posts/<int:post_id>')
Conclusion
This guide covers the essential aspects of Flask web development, from basic setup to advanced API features. Use this as a reference for your Flask projects, and customize the code according to your specific needs.

Remember to always:

Use environment variables for sensitive data

Validate user input

Handle errors appropriately

Test your application thoroughly

Happy coding with Flask!

Note: To download this as a PDF, you can use your browser's print functionality and select "Save as PDF" or use a tool like wkhtmltopdf to convert this HTML content to PDF.


